apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kubeclarity.fullname" . }}
  namespace: '{{ .Release.Namespace }}'
  labels:
    {{ include "kubeclarity.labels" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "kubeclarity.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "kubeclarity.fullname" . }}
      {{- with  .Values.kubeclarity.podAnnotations }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "kubeclarity.fullname" . }}
      initContainers:
{{- if index .Values "kubeclarity-postgresql" "enabled" }}
        - name: '{{ include "kubeclarity.fullname" . }}-wait-for-pg-db'
          image: '{{ index .Values "kubeclarity-postgresql" "image" "registry" | default "docker.io" }}/{{ index .Values "kubeclarity-postgresql" "image" "repository" | default "bitnami/postgresql" }}:{{ index .Values "kubeclarity-postgresql" "image" "tag" | default "14.4.0-debian-11-r4" }}'
          command: ['sh', '-c', 'until pg_isready -h {{ include "kubeclarity.fullname" . }}-postgresql -p 5432 -U "postgres" -d "dbname={{ index .Values "kubeclarity-postgresql" "auth" "database" }}";
            do echo waiting for database; sleep 2; done;']
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
          {{- if not .Values.global.openShiftRestricted }}
            runAsUser: 1001
          {{- end }}
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
{{- toYaml .Values.kubeclarity.initContainers.resources | nindent 12 }}
{{- end}}
        - name: '{{ include "kubeclarity.fullname" . }}-wait-for-sbom-db'
          image: curlimages/curl:7.84.0
          args:
            - /bin/sh
            - -c
            - >
              set -x;
              while [ $(curl -sw '%{http_code}' "http://{{ include "kubeclarity.sbom-db.fullname" . }}:8081/healthz/ready" -o /dev/null) -ne 200 ]; do
                echo waiting for sbom database; sleep 2;
              done;
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
          {{- if not .Values.global.openShiftRestricted }}
            runAsUser: 1001
          {{- end }}
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
{{- toYaml .Values.kubeclarity.initContainers.resources | nindent 12 }}
{{- if index .Values "kubeclarity-grype-server" "enabled" }}
        - name: '{{ include "kubeclarity.fullname" . }}-wait-for-grype-server'
          image: curlimages/curl:7.84.0
          args:
            - /bin/sh
            - -c
            - >
              set -x;
              while [ $(curl -sw '%{http_code}' "http://{{ include "kubeclarity.grype-server.fullname" . }}:8080/healthz/ready" -o /dev/null) -ne 200 ]; do
                echo waiting for grype-server to be ready; sleep 2;
              done;
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
          {{- if not .Values.global.openShiftRestricted }}
            runAsUser: 1001
          {{- end }}
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
{{- toYaml .Values.kubeclarity.initContainers.resources | nindent 12 }}
{{- end}}
      containers:
        - name: kubeclarity
          {{- if .Values.kubeclarity.docker.imageName }}
          image: '{{ .Values.kubeclarity.docker.imageName }}'
          {{- else }}
          image: '{{ .Values.global.docker.registry }}/kubeclarity:{{ .Values.global.docker.tag }}'
          {{- end }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          args:
            - run
            - --log-level
            - {{ .Values.kubeclarity.logLevel }}
          env:
            - name: ENABLE_DB_INFO_LOGS
              value: "{{ .Values.kubeclarity.enableDBInfoLog }}"
            # DB envs
            {{- if .Values.kubeclarity.dbViewRefreshInterval }}
            - name: DB_VIEW_REFRESH_INTERVAL
              value: "{{ .Values.kubeclarity.dbViewRefreshInterval }}"
            {{- end }}
            - name: DB_NAME
              value: {{ index .Values "kubeclarity-postgresql" "auth" "database" }}
{{- if index .Values "kubeclarity-postgresql" "enabled" }}
            - name: DB_HOST
              value: "{{ include "kubeclarity.fullname" . }}-postgresql"
            - name: DB_PORT_NUMBER
              value: "5432"
            - name: DB_USER
              value: "postgres"
{{- else }}
            - name: DB_HOST
              value: "{{ index .Values "kubeclarity-postgresql" "auth" "host" }}"
            - name: DB_PORT_NUMBER
              value: "{{ index .Values "kubeclarity-postgresql" "auth" "port" }}"
            - name: DB_USER
              value: "{{ index .Values "kubeclarity-postgresql" "auth" "user" }}"
{{- end }}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ index .Values "kubeclarity-postgresql" "auth" "existingSecret" }}
                  key: postgres-password
            # runtime-scan envs
            - name: SCANNER_JOB_RESULT_LISTEN_PORT
              value: "{{ index .Values "kubeclarity-runtime-scan" "resultServicePort" }}"
            - name: SCANNER_JOB_TEMPLATE_CONFIG_MAP_NAME
              value: "{{ include "kubeclarity.fullname" . }}-scanner-template"
            - name: SCANNER_JOB_TEMPLATE_CONFIG_MAP_NAMESPACE
              value: "{{ .Release.Namespace }}"
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
            {{- if not .Values.global.openShiftRestricted }}
            runAsGroup: 1000
            runAsUser: 1000
            {{- end }}
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
{{- toYaml .Values.kubeclarity.resources | nindent 12 }}
{{- if .Values.kubeclarity.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.kubeclarity.nodeSelector | nindent 8 }}
{{- end }}
{{- if .Values.kubeclarity.affinity }}
      affinity:
        {{- toYaml .Values.kubeclarity.affinity | nindent 8 }}
{{- end }}
{{- if .Values.kubeclarity.tolerations }}
      tolerations:
        {{- toYaml .Values.kubeclarity.tolerations | nindent 8 }}
{{- end }}
