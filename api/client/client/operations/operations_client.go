// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteApplicationResourcesID(params *DeleteApplicationResourcesIDParams, opts ...ClientOption) (*DeleteApplicationResourcesIDNoContent, error)

	DeleteApplicationsID(params *DeleteApplicationsIDParams, opts ...ClientOption) (*DeleteApplicationsIDNoContent, error)

	GetApplicationResources(params *GetApplicationResourcesParams, opts ...ClientOption) (*GetApplicationResourcesOK, error)

	GetApplicationResourcesID(params *GetApplicationResourcesIDParams, opts ...ClientOption) (*GetApplicationResourcesIDOK, error)

	GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error)

	GetApplicationsID(params *GetApplicationsIDParams, opts ...ClientOption) (*GetApplicationsIDOK, error)

	GetCisdockerbenchmarkresultsID(params *GetCisdockerbenchmarkresultsIDParams, opts ...ClientOption) (*GetCisdockerbenchmarkresultsIDOK, error)

	GetDashboardCounters(params *GetDashboardCountersParams, opts ...ClientOption) (*GetDashboardCountersOK, error)

	GetDashboardMostVulnerable(params *GetDashboardMostVulnerableParams, opts ...ClientOption) (*GetDashboardMostVulnerableOK, error)

	GetDashboardPackagesPerLanguage(params *GetDashboardPackagesPerLanguageParams, opts ...ClientOption) (*GetDashboardPackagesPerLanguageOK, error)

	GetDashboardPackagesPerLicense(params *GetDashboardPackagesPerLicenseParams, opts ...ClientOption) (*GetDashboardPackagesPerLicenseOK, error)

	GetDashboardTrendsVulnerabilities(params *GetDashboardTrendsVulnerabilitiesParams, opts ...ClientOption) (*GetDashboardTrendsVulnerabilitiesOK, error)

	GetDashboardVulnerabilitiesWithFix(params *GetDashboardVulnerabilitiesWithFixParams, opts ...ClientOption) (*GetDashboardVulnerabilitiesWithFixOK, error)

	GetNamespaces(params *GetNamespacesParams, opts ...ClientOption) (*GetNamespacesOK, error)

	GetPackages(params *GetPackagesParams, opts ...ClientOption) (*GetPackagesOK, error)

	GetPackagesID(params *GetPackagesIDParams, opts ...ClientOption) (*GetPackagesIDOK, error)

	GetPackagesIDApplicationResources(params *GetPackagesIDApplicationResourcesParams, opts ...ClientOption) (*GetPackagesIDApplicationResourcesOK, error)

	GetRuntimeQuickscanConfig(params *GetRuntimeQuickscanConfigParams, opts ...ClientOption) (*GetRuntimeQuickscanConfigOK, error)

	GetRuntimeScanProgress(params *GetRuntimeScanProgressParams, opts ...ClientOption) (*GetRuntimeScanProgressOK, error)

	GetRuntimeScanResults(params *GetRuntimeScanResultsParams, opts ...ClientOption) (*GetRuntimeScanResultsOK, error)

	GetRuntimeScheduleScanConfig(params *GetRuntimeScheduleScanConfigParams, opts ...ClientOption) (*GetRuntimeScheduleScanConfigOK, error)

	GetVulnerabilities(params *GetVulnerabilitiesParams, opts ...ClientOption) (*GetVulnerabilitiesOK, error)

	GetVulnerabilitiesVulIDPkgID(params *GetVulnerabilitiesVulIDPkgIDParams, opts ...ClientOption) (*GetVulnerabilitiesVulIDPkgIDOK, error)

	PostApplications(params *PostApplicationsParams, opts ...ClientOption) (*PostApplicationsCreated, error)

	PostApplicationsContentAnalysisID(params *PostApplicationsContentAnalysisIDParams, opts ...ClientOption) (*PostApplicationsContentAnalysisIDCreated, error)

	PostApplicationsVulnerabilityScanID(params *PostApplicationsVulnerabilityScanIDParams, opts ...ClientOption) (*PostApplicationsVulnerabilityScanIDCreated, error)

	PutApplicationsID(params *PutApplicationsIDParams, opts ...ClientOption) (*PutApplicationsIDOK, error)

	PutRuntimeQuickscanConfig(params *PutRuntimeQuickscanConfigParams, opts ...ClientOption) (*PutRuntimeQuickscanConfigCreated, error)

	PutRuntimeScanStart(params *PutRuntimeScanStartParams, opts ...ClientOption) (*PutRuntimeScanStartCreated, error)

	PutRuntimeScanStop(params *PutRuntimeScanStopParams, opts ...ClientOption) (*PutRuntimeScanStopCreated, error)

	PutRuntimeScheduleScanConfig(params *PutRuntimeScheduleScanConfigParams, opts ...ClientOption) (*PutRuntimeScheduleScanConfigCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteApplicationResourcesID deletes application resource
*/
func (a *Client) DeleteApplicationResourcesID(params *DeleteApplicationResourcesIDParams, opts ...ClientOption) (*DeleteApplicationResourcesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationResourcesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteApplicationResourcesID",
		Method:             "DELETE",
		PathPattern:        "/applicationResources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApplicationResourcesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationResourcesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteApplicationResourcesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteApplicationsID deletes application
*/
func (a *Client) DeleteApplicationsID(params *DeleteApplicationsIDParams, opts ...ClientOption) (*DeleteApplicationsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteApplicationsID",
		Method:             "DELETE",
		PathPattern:        "/applications/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApplicationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApplicationsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteApplicationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplicationResources gets application resources
*/
func (a *Client) GetApplicationResources(params *GetApplicationResourcesParams, opts ...ClientOption) (*GetApplicationResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplicationResources",
		Method:             "GET",
		PathPattern:        "/applicationResources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplicationResourcesID gets application resource
*/
func (a *Client) GetApplicationResourcesID(params *GetApplicationResourcesIDParams, opts ...ClientOption) (*GetApplicationResourcesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationResourcesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplicationResourcesID",
		Method:             "GET",
		PathPattern:        "/applicationResources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationResourcesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationResourcesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationResourcesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplications gets applications
*/
func (a *Client) GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplications",
		Method:             "GET",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplicationsID gets application
*/
func (a *Client) GetApplicationsID(params *GetApplicationsIDParams, opts ...ClientOption) (*GetApplicationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplicationsID",
		Method:             "GET",
		PathPattern:        "/applications/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCisdockerbenchmarkresultsID gets c i s docker benchmark results by application resource ID
*/
func (a *Client) GetCisdockerbenchmarkresultsID(params *GetCisdockerbenchmarkresultsIDParams, opts ...ClientOption) (*GetCisdockerbenchmarkresultsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCisdockerbenchmarkresultsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCisdockerbenchmarkresultsID",
		Method:             "GET",
		PathPattern:        "/cisdockerbenchmarkresults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCisdockerbenchmarkresultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCisdockerbenchmarkresultsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCisdockerbenchmarkresultsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDashboardCounters gets number of applications resources packages and vulnerabilities
*/
func (a *Client) GetDashboardCounters(params *GetDashboardCountersParams, opts ...ClientOption) (*GetDashboardCountersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardCountersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDashboardCounters",
		Method:             "GET",
		PathPattern:        "/dashboard/counters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardCountersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardCountersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDashboardCountersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDashboardMostVulnerable gets top 5 most vulnerable applications resources and packages
*/
func (a *Client) GetDashboardMostVulnerable(params *GetDashboardMostVulnerableParams, opts ...ClientOption) (*GetDashboardMostVulnerableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardMostVulnerableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDashboardMostVulnerable",
		Method:             "GET",
		PathPattern:        "/dashboard/mostVulnerable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardMostVulnerableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardMostVulnerableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDashboardMostVulnerableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDashboardPackagesPerLanguage gets packages count per language
*/
func (a *Client) GetDashboardPackagesPerLanguage(params *GetDashboardPackagesPerLanguageParams, opts ...ClientOption) (*GetDashboardPackagesPerLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardPackagesPerLanguageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDashboardPackagesPerLanguage",
		Method:             "GET",
		PathPattern:        "/dashboard/packagesPerLanguage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardPackagesPerLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardPackagesPerLanguageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDashboardPackagesPerLanguageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDashboardPackagesPerLicense gets packages count per license type
*/
func (a *Client) GetDashboardPackagesPerLicense(params *GetDashboardPackagesPerLicenseParams, opts ...ClientOption) (*GetDashboardPackagesPerLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardPackagesPerLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDashboardPackagesPerLicense",
		Method:             "GET",
		PathPattern:        "/dashboard/packagesPerLicense",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardPackagesPerLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardPackagesPerLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDashboardPackagesPerLicenseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDashboardTrendsVulnerabilities gets new vulnerabilities trend
*/
func (a *Client) GetDashboardTrendsVulnerabilities(params *GetDashboardTrendsVulnerabilitiesParams, opts ...ClientOption) (*GetDashboardTrendsVulnerabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardTrendsVulnerabilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDashboardTrendsVulnerabilities",
		Method:             "GET",
		PathPattern:        "/dashboard/trends/vulnerabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardTrendsVulnerabilitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardTrendsVulnerabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDashboardTrendsVulnerabilitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDashboardVulnerabilitiesWithFix gets vulnerabilities with fix available per severity
*/
func (a *Client) GetDashboardVulnerabilitiesWithFix(params *GetDashboardVulnerabilitiesWithFixParams, opts ...ClientOption) (*GetDashboardVulnerabilitiesWithFixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardVulnerabilitiesWithFixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDashboardVulnerabilitiesWithFix",
		Method:             "GET",
		PathPattern:        "/dashboard/vulnerabilitiesWithFix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardVulnerabilitiesWithFixReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardVulnerabilitiesWithFixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDashboardVulnerabilitiesWithFixDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNamespaces gets list of namespaces in kubernetes cluster
*/
func (a *Client) GetNamespaces(params *GetNamespacesParams, opts ...ClientOption) (*GetNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNamespaces",
		Method:             "GET",
		PathPattern:        "/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNamespacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPackages gets packages
*/
func (a *Client) GetPackages(params *GetPackagesParams, opts ...ClientOption) (*GetPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPackages",
		Method:             "GET",
		PathPattern:        "/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPackagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPackagesID gets package
*/
func (a *Client) GetPackagesID(params *GetPackagesIDParams, opts ...ClientOption) (*GetPackagesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackagesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPackagesID",
		Method:             "GET",
		PathPattern:        "/packages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackagesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackagesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPackagesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPackagesIDApplicationResources gets package application resources
*/
func (a *Client) GetPackagesIDApplicationResources(params *GetPackagesIDApplicationResourcesParams, opts ...ClientOption) (*GetPackagesIDApplicationResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackagesIDApplicationResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPackagesIDApplicationResources",
		Method:             "GET",
		PathPattern:        "/packages/{id}/applicationResources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPackagesIDApplicationResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackagesIDApplicationResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPackagesIDApplicationResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRuntimeQuickscanConfig gets runtime quick scan configuration
*/
func (a *Client) GetRuntimeQuickscanConfig(params *GetRuntimeQuickscanConfigParams, opts ...ClientOption) (*GetRuntimeQuickscanConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuntimeQuickscanConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRuntimeQuickscanConfig",
		Method:             "GET",
		PathPattern:        "/runtime/quickscan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuntimeQuickscanConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuntimeQuickscanConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRuntimeQuickscanConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRuntimeScanProgress gets scan progress
*/
func (a *Client) GetRuntimeScanProgress(params *GetRuntimeScanProgressParams, opts ...ClientOption) (*GetRuntimeScanProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuntimeScanProgressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRuntimeScanProgress",
		Method:             "GET",
		PathPattern:        "/runtime/scan/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuntimeScanProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuntimeScanProgressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRuntimeScanProgressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRuntimeScanResults gets scan results
*/
func (a *Client) GetRuntimeScanResults(params *GetRuntimeScanResultsParams, opts ...ClientOption) (*GetRuntimeScanResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuntimeScanResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRuntimeScanResults",
		Method:             "GET",
		PathPattern:        "/runtime/scan/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuntimeScanResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuntimeScanResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRuntimeScanResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRuntimeScheduleScanConfig gets runtime scheduled scan configuration
*/
func (a *Client) GetRuntimeScheduleScanConfig(params *GetRuntimeScheduleScanConfigParams, opts ...ClientOption) (*GetRuntimeScheduleScanConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuntimeScheduleScanConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRuntimeScheduleScanConfig",
		Method:             "GET",
		PathPattern:        "/runtime/scheduleScan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuntimeScheduleScanConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuntimeScheduleScanConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRuntimeScheduleScanConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetVulnerabilities gets vulnerabilities
*/
func (a *Client) GetVulnerabilities(params *GetVulnerabilitiesParams, opts ...ClientOption) (*GetVulnerabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVulnerabilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVulnerabilities",
		Method:             "GET",
		PathPattern:        "/vulnerabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVulnerabilitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVulnerabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVulnerabilitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetVulnerabilitiesVulIDPkgID gets a vulnerability of a specific package
*/
func (a *Client) GetVulnerabilitiesVulIDPkgID(params *GetVulnerabilitiesVulIDPkgIDParams, opts ...ClientOption) (*GetVulnerabilitiesVulIDPkgIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVulnerabilitiesVulIDPkgIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVulnerabilitiesVulIDPkgID",
		Method:             "GET",
		PathPattern:        "/vulnerabilities/{vul_id}/{pkg_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVulnerabilitiesVulIDPkgIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVulnerabilitiesVulIDPkgIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVulnerabilitiesVulIDPkgIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostApplications creates application
*/
func (a *Client) PostApplications(params *PostApplicationsParams, opts ...ClientOption) (*PostApplicationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostApplications",
		Method:             "POST",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplicationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostApplicationsContentAnalysisID reports a content analysis for a specific application
*/
func (a *Client) PostApplicationsContentAnalysisID(params *PostApplicationsContentAnalysisIDParams, opts ...ClientOption) (*PostApplicationsContentAnalysisIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplicationsContentAnalysisIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostApplicationsContentAnalysisID",
		Method:             "POST",
		PathPattern:        "/applications/contentAnalysis/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostApplicationsContentAnalysisIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplicationsContentAnalysisIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplicationsContentAnalysisIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostApplicationsVulnerabilityScanID reports a vulnerability scan for a specific application
*/
func (a *Client) PostApplicationsVulnerabilityScanID(params *PostApplicationsVulnerabilityScanIDParams, opts ...ClientOption) (*PostApplicationsVulnerabilityScanIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplicationsVulnerabilityScanIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostApplicationsVulnerabilityScanID",
		Method:             "POST",
		PathPattern:        "/applications/vulnerabilityScan/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostApplicationsVulnerabilityScanIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplicationsVulnerabilityScanIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplicationsVulnerabilityScanIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutApplicationsID updates application
*/
func (a *Client) PutApplicationsID(params *PutApplicationsIDParams, opts ...ClientOption) (*PutApplicationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutApplicationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutApplicationsID",
		Method:             "PUT",
		PathPattern:        "/applications/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutApplicationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutApplicationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutApplicationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutRuntimeQuickscanConfig sets runtime quick scan configuration
*/
func (a *Client) PutRuntimeQuickscanConfig(params *PutRuntimeQuickscanConfigParams, opts ...ClientOption) (*PutRuntimeQuickscanConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRuntimeQuickscanConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRuntimeQuickscanConfig",
		Method:             "PUT",
		PathPattern:        "/runtime/quickscan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRuntimeQuickscanConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRuntimeQuickscanConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutRuntimeQuickscanConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutRuntimeScanStart schedules a runtime scan
*/
func (a *Client) PutRuntimeScanStart(params *PutRuntimeScanStartParams, opts ...ClientOption) (*PutRuntimeScanStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRuntimeScanStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRuntimeScanStart",
		Method:             "PUT",
		PathPattern:        "/runtime/scan/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRuntimeScanStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRuntimeScanStartCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutRuntimeScanStartDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutRuntimeScanStop stops a runtime scan
*/
func (a *Client) PutRuntimeScanStop(params *PutRuntimeScanStopParams, opts ...ClientOption) (*PutRuntimeScanStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRuntimeScanStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRuntimeScanStop",
		Method:             "PUT",
		PathPattern:        "/runtime/scan/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRuntimeScanStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRuntimeScanStopCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutRuntimeScanStopDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutRuntimeScheduleScanConfig sets runtime scheduled scan configuration
*/
func (a *Client) PutRuntimeScheduleScanConfig(params *PutRuntimeScheduleScanConfigParams, opts ...ClientOption) (*PutRuntimeScheduleScanConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRuntimeScheduleScanConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutRuntimeScheduleScanConfig",
		Method:             "PUT",
		PathPattern:        "/runtime/scheduleScan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRuntimeScheduleScanConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRuntimeScheduleScanConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutRuntimeScheduleScanConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
