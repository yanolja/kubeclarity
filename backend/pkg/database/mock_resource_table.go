// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/kubeclarity/backend/pkg/database (interfaces: ResourceTable)

// Package database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/openclarity/kubeclarity/api/server/models"
	reflect "reflect"
)

// MockResourceTable is a mock of ResourceTable interface
type MockResourceTable struct {
	ctrl     *gomock.Controller
	recorder *MockResourceTableMockRecorder
}

// MockResourceTableMockRecorder is the mock recorder for MockResourceTable
type MockResourceTableMockRecorder struct {
	mock *MockResourceTable
}

// NewMockResourceTable creates a new mock instance
func NewMockResourceTable(ctrl *gomock.Controller) *MockResourceTable {
	mock := &MockResourceTable{ctrl: ctrl}
	mock.recorder = &MockResourceTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceTable) EXPECT() *MockResourceTableMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockResourceTable) Count(arg0 *CountFilters) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockResourceTableMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockResourceTable)(nil).Count), arg0)
}

// Create mocks base method
func (m *MockResourceTable) Create(arg0 *Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockResourceTableMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceTable)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockResourceTable) Delete(arg0 *Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockResourceTableMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceTable)(nil).Delete), arg0)
}

// GetApplicationResource mocks base method
func (m *MockResourceTable) GetApplicationResource(arg0 string) (*models.ApplicationResourceEx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResource", arg0)
	ret0, _ := ret[0].(*models.ApplicationResourceEx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationResource indicates an expected call of GetApplicationResource
func (mr *MockResourceTableMockRecorder) GetApplicationResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResource", reflect.TypeOf((*MockResourceTable)(nil).GetApplicationResource), arg0)
}

// GetApplicationResourcesAndTotal mocks base method
func (m *MockResourceTable) GetApplicationResourcesAndTotal(arg0 GetApplicationResourcesParams) ([]ResourceView, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResourcesAndTotal", arg0)
	ret0, _ := ret[0].([]ResourceView)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationResourcesAndTotal indicates an expected call of GetApplicationResourcesAndTotal
func (mr *MockResourceTableMockRecorder) GetApplicationResourcesAndTotal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResourcesAndTotal", reflect.TypeOf((*MockResourceTable)(nil).GetApplicationResourcesAndTotal), arg0)
}

// GetDBResource mocks base method
func (m *MockResourceTable) GetDBResource(arg0 string, arg1 bool) (*Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBResource", arg0, arg1)
	ret0, _ := ret[0].(*Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBResource indicates an expected call of GetDBResource
func (mr *MockResourceTableMockRecorder) GetDBResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBResource", reflect.TypeOf((*MockResourceTable)(nil).GetDBResource), arg0, arg1)
}

// GetMostVulnerable mocks base method
func (m *MockResourceTable) GetMostVulnerable(arg0 int) ([]*models.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostVulnerable", arg0)
	ret0, _ := ret[0].([]*models.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostVulnerable indicates an expected call of GetMostVulnerable
func (mr *MockResourceTableMockRecorder) GetMostVulnerable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostVulnerable", reflect.TypeOf((*MockResourceTable)(nil).GetMostVulnerable), arg0)
}
