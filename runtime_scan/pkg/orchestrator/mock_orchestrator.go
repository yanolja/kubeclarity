// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/kubeclarity/runtime_scan/pkg/orchestrator (interfaces: VulnerabilitiesScanner)

// Package orchestrator is a generated GoMock package.
package orchestrator

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/openclarity/kubeclarity/runtime_scan/pkg/config"
	types "github.com/openclarity/kubeclarity/runtime_scan/pkg/types"
	reflect "reflect"
)

// MockVulnerabilitiesScanner is a mock of VulnerabilitiesScanner interface
type MockVulnerabilitiesScanner struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilitiesScannerMockRecorder
}

// MockVulnerabilitiesScannerMockRecorder is the mock recorder for MockVulnerabilitiesScanner
type MockVulnerabilitiesScannerMockRecorder struct {
	mock *MockVulnerabilitiesScanner
}

// NewMockVulnerabilitiesScanner creates a new mock instance
func NewMockVulnerabilitiesScanner(ctrl *gomock.Controller) *MockVulnerabilitiesScanner {
	mock := &MockVulnerabilitiesScanner{ctrl: ctrl}
	mock.recorder = &MockVulnerabilitiesScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVulnerabilitiesScanner) EXPECT() *MockVulnerabilitiesScannerMockRecorder {
	return m.recorder
}

// Clear mocks base method
func (m *MockVulnerabilitiesScanner) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockVulnerabilitiesScannerMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockVulnerabilitiesScanner)(nil).Clear))
}

// Results mocks base method
func (m *MockVulnerabilitiesScanner) Results() *types.ScanResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*types.ScanResults)
	return ret0
}

// Results indicates an expected call of Results
func (mr *MockVulnerabilitiesScannerMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockVulnerabilitiesScanner)(nil).Results))
}

// Scan mocks base method
func (m *MockVulnerabilitiesScanner) Scan(arg0 *config.ScanConfig) (chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan
func (mr *MockVulnerabilitiesScannerMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockVulnerabilitiesScanner)(nil).Scan), arg0)
}

// ScanProgress mocks base method
func (m *MockVulnerabilitiesScanner) ScanProgress() types.ScanProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanProgress")
	ret0, _ := ret[0].(types.ScanProgress)
	return ret0
}

// ScanProgress indicates an expected call of ScanProgress
func (mr *MockVulnerabilitiesScannerMockRecorder) ScanProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanProgress", reflect.TypeOf((*MockVulnerabilitiesScanner)(nil).ScanProgress))
}

// Start mocks base method
func (m *MockVulnerabilitiesScanner) Start(arg0 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start
func (mr *MockVulnerabilitiesScannerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVulnerabilitiesScanner)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockVulnerabilitiesScanner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockVulnerabilitiesScannerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVulnerabilitiesScanner)(nil).Stop))
}
